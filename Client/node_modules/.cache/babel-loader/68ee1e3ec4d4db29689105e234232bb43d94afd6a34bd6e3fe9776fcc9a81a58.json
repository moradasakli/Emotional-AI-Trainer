{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morad\\\\Desktop\\\\Emotion Web\\\\Client\\\\src\\\\pages\\\\Exam.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios'; // Import axios\nimport '../Exam.css';\nimport { AuthContext } from '../context/AuthContext'; // Import AuthContext for current user\nimport { Helmet } from 'react-helmet';\nimport logo from '../images/logo.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Exam = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [categories, setCategories] = useState([]);\n  const [results, setResults] = useState(null);\n  const [lowestCategoryInfo, setLowestCategoryInfo] = useState(null); // State for lowest category info\n  const {\n    auth\n  } = useContext(AuthContext); // Correctly access username from context\n\n  useEffect(() => {\n    // Reset state when component mounts or when retaking the exam\n    setQuestions([]);\n    setOptions([]);\n    setCurrentQuestionIndex(0);\n    setAnswers({});\n    setCategories([]);\n    setResults(null);\n    setLowestCategoryInfo(null);\n\n    // Fetch the questions and options from exam.json\n    fetch('/exam.json').then(response => response.json()).then(data => {\n      setQuestions(data.questions);\n      setOptions(data.options);\n      const uniqueCategories = [...new Set(data.questions.map(q => q.category))];\n      setCategories(uniqueCategories);\n    }).catch(error => console.error('Error loading questions:', error));\n  }, []); // Empty dependency array to run only on mount\n\n  const handleAnswerClick = grade => {\n    setAnswers({\n      ...answers,\n      [currentQuestionIndex]: grade\n    });\n  };\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const previousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const finishExam = async () => {\n    if (!auth.username) {\n      console.error('Username is undefined');\n      return;\n    }\n    try {\n      const categoryScores = {};\n      categories.forEach(category => {\n        const categoryQuestions = questions.filter(q => q.category === category);\n        const totalQuestions = categoryQuestions.length;\n        const totalScore = categoryQuestions.reduce((sum, question) => {\n          const questionIndex = questions.indexOf(question);\n          return sum + (answers[questionIndex] || 0);\n        }, 0);\n        const maxScore = totalQuestions * options[0].grade;\n        const percentage = totalScore / maxScore * 100;\n        categoryScores[category] = percentage.toFixed(2);\n      });\n      const overallAverage = Object.values(categoryScores).reduce((sum, score) => sum + parseFloat(score), 0) / categories.length;\n      setResults({\n        categoryScores,\n        overallAverage: overallAverage.toFixed(2)\n      });\n\n      // Identify the lowest and second-lowest categories, excluding \"Other\" if it's the lowest\n      const sortedCategories = Object.entries(categoryScores).sort((a, b) => parseFloat(a[1]) - parseFloat(b[1]));\n      let lowestCategoryName = sortedCategories[0][0].toLowerCase().replace(/\\s+/g, ''); // Convert to lowercase and remove spaces\n\n      if (lowestCategoryName === 'other') {\n        lowestCategoryName = sortedCategories[1][0].toLowerCase().replace(/\\s+/g, ''); // Use the second-lowest if \"Other\" is the lowest\n      }\n      console.log(`Fetching JSON file for category: ${lowestCategoryName}`); // Debugging log\n\n      // Fetch the JSON file for the lowest or second-lowest category\n      try {\n        const response = await fetch(`/categoryInfo/${lowestCategoryName}.json`);\n        if (!response.ok) {\n          throw new Error(`JSON file not found for category: ${lowestCategoryName}`);\n        }\n        const data = await response.json();\n        setLowestCategoryInfo(data); // Set the lowest category info\n        console.log(`Data fetched successfully for category: ${lowestCategoryName}`, data);\n      } catch (error) {\n        console.error('Error fetching category info:', error);\n      }\n\n      // Save exam results to the database using axios\n      try {\n        const response = await axios.post('https://server-phi-fawn.vercel.app/api/submit-exam', {\n          username: auth.username,\n          // Make sure username is not undefined here\n          overallAverage: parseFloat(overallAverage.toFixed(2))\n        });\n        if (response.status === 201) {\n          console.log(response.data.message);\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Error submitting exam results:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const getCategoryIndex = category => categories.indexOf(category) + 1;\n  if (questions.length === 0 || options.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"EmotionAI - Exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        href: logo,\n        sizes: \"16x16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exam-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this), categories.map((category, index) => {\n          const firstQuestionIndexInCategory = questions.findIndex(q => q.category === category);\n          const isCompleted = currentQuestionIndex > firstQuestionIndexInCategory;\n          const isActive = currentQuestionIndex >= firstQuestionIndexInCategory && currentQuestionIndex < firstQuestionIndexInCategory + questions.filter(q => q.category === category).length;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `progress-step ${isCompleted ? 'completed' : ''} ${isActive ? 'active' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-step-circle\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-step-text\",\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: results ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), Object.entries(results.categoryScores).filter(([category]) => category !== \"Other\") // Filter out \"Other\" category\n          .map(([category, score], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-bar-title\",\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-bar-track\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `result-bar-fill result-bar-fill-${index}` // Add a unique class for each bar\n                ,\n                style: {\n                  width: `${score}%`\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"result-bar-label\",\n                  children: [score, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this)]\n          }, category, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overall-average-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overall-score-label\",\n              children: \"Overall Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circular-progress\",\n              style: {\n                '--percentage': `${results.overallAverage}%`\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"overall-average-text\",\n                children: [results.overallAverage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), lowestCategoryInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lowest-category-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: '#00796b'\n              },\n              children: lowestCategoryInfo.title1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: lowestCategoryInfo.content1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: '#00796b'\n              },\n              children: lowestCategoryInfo.title2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: lowestCategoryInfo.content2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: '#00796b'\n              },\n              children: lowestCategoryInfo.title3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: lowestCategoryInfo.content3.split('\\n').map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: question.trim()\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 21\n              }, this) // Trim whitespace and display each question in a list\n              )\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                marginTop: '20px',\n                color: '#d32f2f'\n              },\n              children: lowestCategoryInfo.title4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: questions[currentQuestionIndex].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `option-button ${answers[currentQuestionIndex] === option.grade ? 'selected' : ''}`,\n              onClick: () => handleAnswerClick(option.grade),\n              children: option.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navigation-buttons\",\n            children: [currentQuestionIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: previousQuestion,\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this), answers[currentQuestionIndex] !== undefined && currentQuestionIndex < questions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"next-button\",\n              onClick: nextQuestion,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), answers[currentQuestionIndex] !== undefined && currentQuestionIndex === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: finishExam,\n              children: \"Finish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(Exam, \"q7o38MG4KaJf8vMLrZNrre3RSDs=\");\n_c = Exam;\nexport default Exam;\nvar _c;\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","Helmet","logo","jsxDEV","_jsxDEV","Fragment","_Fragment","Exam","_s","questions","setQuestions","options","setOptions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","categories","setCategories","results","setResults","lowestCategoryInfo","setLowestCategoryInfo","auth","fetch","then","response","json","data","uniqueCategories","Set","map","q","category","catch","error","console","handleAnswerClick","grade","nextQuestion","length","previousQuestion","finishExam","username","categoryScores","forEach","categoryQuestions","filter","totalQuestions","totalScore","reduce","sum","question","questionIndex","indexOf","maxScore","percentage","toFixed","overallAverage","Object","values","score","parseFloat","sortedCategories","entries","sort","a","b","lowestCategoryName","toLowerCase","replace","log","ok","Error","post","status","message","_error$response","_error$response$data","getCategoryIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","rel","type","href","sizes","className","index","firstQuestionIndexInCategory","findIndex","isCompleted","isActive","style","width","color","title1","content1","title2","content2","title3","content3","split","trim","marginTop","title4","text","option","onClick","undefined","_c","$RefreshReg$"],"sources":["C:/Users/morad/Desktop/Emotion Web/Client/src/pages/Exam.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios'; // Import axios\nimport '../Exam.css';\nimport { AuthContext } from '../context/AuthContext'; // Import AuthContext for current user\nimport { Helmet } from 'react-helmet';\nimport logo from '../images/logo.png'; \n\nconst Exam = () => {\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [categories, setCategories] = useState([]);\n  const [results, setResults] = useState(null);\n  const [lowestCategoryInfo, setLowestCategoryInfo] = useState(null); // State for lowest category info\n  const { auth } = useContext(AuthContext); // Correctly access username from context\n\n  useEffect(() => {\n    // Reset state when component mounts or when retaking the exam\n    setQuestions([]);\n    setOptions([]);\n    setCurrentQuestionIndex(0);\n    setAnswers({});\n    setCategories([]);\n    setResults(null);\n    setLowestCategoryInfo(null);\n\n    // Fetch the questions and options from exam.json\n    fetch('/exam.json')\n      .then(response => response.json())\n      .then(data => {\n        setQuestions(data.questions);\n        setOptions(data.options);\n        const uniqueCategories = [...new Set(data.questions.map(q => q.category))];\n        setCategories(uniqueCategories);\n      })\n      .catch(error => console.error('Error loading questions:', error));\n  }, []); // Empty dependency array to run only on mount\n\n  const handleAnswerClick = (grade) => {\n    setAnswers({ ...answers, [currentQuestionIndex]: grade });\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const previousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  const finishExam = async () => {\n    if (!auth.username) {\n      console.error('Username is undefined');\n      return;\n    }\n\n    try {\n      const categoryScores = {};\n      categories.forEach(category => {\n        const categoryQuestions = questions.filter(q => q.category === category);\n        const totalQuestions = categoryQuestions.length;\n        const totalScore = categoryQuestions.reduce((sum, question) => {\n          const questionIndex = questions.indexOf(question);\n          return sum + (answers[questionIndex] || 0);\n        }, 0);\n        const maxScore = totalQuestions * options[0].grade;\n        const percentage = (totalScore / maxScore) * 100;\n        categoryScores[category] = percentage.toFixed(2);\n      });\n\n      const overallAverage = Object.values(categoryScores).reduce((sum, score) => sum + parseFloat(score), 0) / categories.length;\n\n      setResults({ categoryScores, overallAverage: overallAverage.toFixed(2) });\n\n      // Identify the lowest and second-lowest categories, excluding \"Other\" if it's the lowest\n      const sortedCategories = Object.entries(categoryScores).sort((a, b) => parseFloat(a[1]) - parseFloat(b[1]));\n      let lowestCategoryName = sortedCategories[0][0].toLowerCase().replace(/\\s+/g, ''); // Convert to lowercase and remove spaces\n\n      if (lowestCategoryName === 'other') {\n        lowestCategoryName = sortedCategories[1][0].toLowerCase().replace(/\\s+/g, ''); // Use the second-lowest if \"Other\" is the lowest\n      }\n\n      console.log(`Fetching JSON file for category: ${lowestCategoryName}`); // Debugging log\n\n      // Fetch the JSON file for the lowest or second-lowest category\n      try {\n        const response = await fetch(`/categoryInfo/${lowestCategoryName}.json`);\n        if (!response.ok) {\n          throw new Error(`JSON file not found for category: ${lowestCategoryName}`);\n        }\n        const data = await response.json();\n        setLowestCategoryInfo(data); // Set the lowest category info\n        console.log(`Data fetched successfully for category: ${lowestCategoryName}`, data);\n      } catch (error) {\n        console.error('Error fetching category info:', error);\n      }\n\n      // Save exam results to the database using axios\n      try {\n        const response = await axios.post('https://server-phi-fawn.vercel.app/api/submit-exam', {\n          username: auth.username, // Make sure username is not undefined here\n          overallAverage: parseFloat(overallAverage.toFixed(2)),\n        });\n\n        if (response.status === 201) {\n          console.log(response.data.message);\n        }\n      } catch (error) {\n        console.error('Error submitting exam results:', error.response?.data?.message || error.message);\n      }\n\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const getCategoryIndex = (category) => categories.indexOf(category) + 1;\n\n  if (questions.length === 0 || options.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>    \n    <Helmet>\n      <title>EmotionAI - Exam</title>\n      <link rel=\"icon\" type=\"image/png\" href={logo} sizes=\"16x16\" />\n    </Helmet>\n\n    <div className=\"exam-container\">\n      <div className=\"progress-bar\">\n        <div className=\"progress-track\"></div>\n        {categories.map((category, index) => {\n          const firstQuestionIndexInCategory = questions.findIndex(q => q.category === category);\n          const isCompleted = currentQuestionIndex > firstQuestionIndexInCategory;\n          const isActive = currentQuestionIndex >= firstQuestionIndexInCategory && currentQuestionIndex < firstQuestionIndexInCategory + questions.filter(q => q.category === category).length;\n\n          return (\n            <div\n              key={index}\n              className={`progress-step ${isCompleted ? 'completed' : ''} ${isActive ? 'active' : ''}`}\n            >\n              <div className=\"progress-step-circle\">{index + 1}</div>\n              <div className=\"progress-step-text\">{category}</div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"question-section\">\n        {results ? (\n          <div className=\"results-section\">\n            <h2>Results</h2>\n            {Object.entries(results.categoryScores)\n              .filter(([category]) => category !== \"Other\") // Filter out \"Other\" category\n              .map(([category, score], index) => (\n                <div className=\"result-bar\" key={category}>\n                  <div className=\"result-bar-title\">{category}</div>\n                  <div className=\"result-bar-track\">\n                    <div\n                      className={`result-bar-fill result-bar-fill-${index}`} // Add a unique class for each bar\n                      style={{ width: `${score}%` }}>\n                      <span className=\"result-bar-label\">{score}%</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n            {/* Overall average circle */}\n            <div className=\"overall-average-container\">\n              <div className=\"overall-score-label\">Overall Score</div> {/* Label above the circle */}\n              <div className=\"circular-progress\" style={{ '--percentage': `${results.overallAverage}%` }}>\n                <div className=\"overall-average-text\">{results.overallAverage}%</div>\n              </div>\n            </div>\n\n            {/* Display additional information for the lowest category */}\n            {lowestCategoryInfo && (\n              <div className=\"lowest-category-info\">\n                <h3 style={{ color: '#00796b' }}>{lowestCategoryInfo.title1}</h3> {/* Changed color */}\n                <p>{lowestCategoryInfo.content1}</p>\n                <h3 style={{ color: '#00796b' }}>{lowestCategoryInfo.title2}</h3> {/* Changed color */}\n                <p>{lowestCategoryInfo.content2}</p>\n                <h3 style={{ color: '#00796b' }}>{lowestCategoryInfo.title3}</h3> {/* Changed color */}\n                <ul>\n                  {/* Split content3 into separate questions */}\n                  {lowestCategoryInfo.content3.split('\\n').map((question, index) => (\n                    <li key={index}>{question.trim()}</li> // Trim whitespace and display each question in a list\n                  ))}\n                </ul>\n                {/* Display the new title4 content */}\n                <h3 style={{ marginTop: '20px', color: '#d32f2f' }}>{lowestCategoryInfo.title4}</h3>\n              </div>\n            )}\n\n          </div>\n        ) : (\n          <>\n            <p>{questions[currentQuestionIndex].text}</p>\n            <div className=\"options\">\n              {options.map((option, index) => (\n                <button\n                  key={index}\n                  className={`option-button ${answers[currentQuestionIndex] === option.grade ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(option.grade)}\n                >\n                  {option.text}\n                </button>\n              ))}\n            </div>\n            <div className=\"navigation-buttons\">\n              {currentQuestionIndex > 0 && (\n                <button onClick={previousQuestion}>Previous</button>\n              )}\n              {answers[currentQuestionIndex] !== undefined && currentQuestionIndex < questions.length - 1 && (\n                <button className=\"next-button\" onClick={nextQuestion}>Next</button>\n              )}\n              {answers[currentQuestionIndex] !== undefined && currentQuestionIndex === questions.length - 1 && (\n                <button onClick={finishExam}>Finish</button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default Exam;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}